name: Docker CI/CD with API Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12.4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run API test
      run: python -m unittest simple_api_test.py

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        tags: ntust-course-tracker:latest
        outputs: type=docker,dest=/tmp/docker-image.tar

    - name: Deploy to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      run: |
        echo "$SERVER_SSH_KEY" > deploy_key
        chmod 600 deploy_key
        scp -o StrictHostKeyChecking=no -i deploy_key -P $SERVER_PORT /tmp/docker-image.tar $SERVER_USER@$SERVER_HOST:~/docker-image.tar
        ssh -o StrictHostKeyChecking=no -i deploy_key -p $SERVER_PORT $SERVER_USER@$SERVER_HOST '
          docker load < ~/docker-image.tar
          docker stop ntust-course-tracker || true
          docker rm ntust-course-tracker || true
          docker run -d --name ntust-course-tracker \
            --restart unless-stopped \
            -v /path/on/host/logs:/app/logs \
            ntust-course-tracker:latest
        '