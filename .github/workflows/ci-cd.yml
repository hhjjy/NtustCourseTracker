name: Docker CI/CD with API Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.12.4
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run API test
      run: python -m unittest simple_api_test.py
    # - name: Run all tests
    #   run: python -m unittest discover -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    steps:
    - uses: actions/checkout@v2

    - name: Build Docker image
      run: docker build -t ntust-course-tracker:latest .

    - name: Save Docker image
      run: docker save ntust-course-tracker:latest > image.tar

    - name: Setup SSH key
      env:
        SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      run: |
        echo "$SERVER_SSH_KEY" > deploy_key
        chmod 600 deploy_key

    - name: Copy Docker image to server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        scp -o StrictHostKeyChecking=no -i deploy_key -P $SERVER_PORT image.tar $SERVER_USER@$SERVER_HOST:~/image.tar

    - name: Load Docker image on server
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i deploy_key -p $SERVER_PORT $SERVER_USER@$SERVER_HOST 'sudo docker load < ~/image.tar'

    - name: Stop and remove existing container
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i deploy_key -p $SERVER_PORT $SERVER_USER@$SERVER_HOST '
          sudo docker stop ntust-course-tracker || true
          sudo docker rm ntust-course-tracker || true
        '

    - name: Run new Docker container
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_PORT: ${{ secrets.SERVER_PORT }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
      run: |
        ssh -o StrictHostKeyChecking=no -i deploy_key -p $SERVER_PORT $SERVER_USER@$SERVER_HOST '
          sudo docker run -d --name ntust-course-tracker \
            --restart unless-stopped \
            -v /home/$USER/course_logs:/app/logs \
            ntust-course-tracker:latest
        '